DEBUG] Parsing BUILD file BuildFile(tests/python/pants_test/engine/exp/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)).
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_tests.PythonTests'>, name=addressable, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(tests/python/pants_test/engine/exp/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), addressable)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_tests.PythonTests'>, name=fs, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(tests/python/pants_test/engine/exp/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), fs)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_tests.PythonTests'>, name=path_globs, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(tests/python/pants_test/engine/exp/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), path_globs)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_tests.PythonTests'>, name=struct, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(tests/python/pants_test/engine/exp/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), struct)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_tests.PythonTests'>, name=engine, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(tests/python/pants_test/engine/exp/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), engine)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_tests.PythonTests'>, name=graph, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(tests/python/pants_test/engine/exp/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), graph)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_tests.PythonTests'>, name=mapper, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(tests/python/pants_test/engine/exp/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), mapper)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_tests.PythonTests'>, name=parsers, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(tests/python/pants_test/engine/exp/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), parsers)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_tests.PythonTests'>, name=storage, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(tests/python/pants_test/engine/exp/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), storage)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_tests.PythonTests'>, name=scheduler, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(tests/python/pants_test/engine/exp/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), scheduler)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_tests.PythonTests'>, name=scheduler_test_base, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(tests/python/pants_test/engine/exp/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), scheduler_test_base)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_tests.PythonTests'>, name=graph_validator, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(tests/python/pants_test/engine/exp/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), graph_validator)
DEBUG] BuildFile(tests/python/pants_test/engine/exp/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)) produced the following Addressables:
DEBUG]   * BuildFileAddress(BuildFile(tests/python/pants_test/engine/exp/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), scheduler): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_tests.PythonTests'>, name=scheduler, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(tests/python/pants_test/engine/exp/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), mapper): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_tests.PythonTests'>, name=mapper, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(tests/python/pants_test/engine/exp/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), storage): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_tests.PythonTests'>, name=storage, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(tests/python/pants_test/engine/exp/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), fs): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_tests.PythonTests'>, name=fs, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(tests/python/pants_test/engine/exp/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), scheduler_test_base): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_tests.PythonTests'>, name=scheduler_test_base, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(tests/python/pants_test/engine/exp/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), parsers): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_tests.PythonTests'>, name=parsers, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(tests/python/pants_test/engine/exp/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), struct): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_tests.PythonTests'>, name=struct, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(tests/python/pants_test/engine/exp/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), path_globs): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_tests.PythonTests'>, name=path_globs, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(tests/python/pants_test/engine/exp/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), graph_validator): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_tests.PythonTests'>, name=graph_validator, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(tests/python/pants_test/engine/exp/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), addressable): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_tests.PythonTests'>, name=addressable, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(tests/python/pants_test/engine/exp/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), graph): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_tests.PythonTests'>, name=graph, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(tests/python/pants_test/engine/exp/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), engine): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_tests.PythonTests'>, name=engine, **kwargs=...)
DEBUG] excludes:
  
DEBUG] Targets after excludes: tests/python/pants_test/engine/exp:engine, tests/python/pants_test/engine/exp:parsers, tests/python/pants_test/engine/exp:mapper, tests/python/pants_test/engine/exp:path_globs, tests/python/pants_test/engine/exp:graph_validator, tests/python/pants_test/engine/exp:scheduler_test_base, tests/python/pants_test/engine/exp:scheduler, tests/python/pants_test/engine/exp:graph, tests/python/pants_test/engine/exp:storage, tests/python/pants_test/engine/exp:struct, tests/python/pants_test/engine/exp:addressable, tests/python/pants_test/engine/exp:fs
DEBUG] Excluded 0 targets.
DEBUG] Parsing BUILD file BuildFile(src/python/pants/build_graph/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)).
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=build_graph, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(src/python/pants/build_graph/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), build_graph)
DEBUG] BuildFile(src/python/pants/build_graph/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)) produced the following Addressables:
DEBUG]   * BuildFileAddress(BuildFile(src/python/pants/build_graph/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), build_graph): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=build_graph, **kwargs=...)
DEBUG] Parsing BUILD file BuildFile(src/python/pants/engine/exp/examples/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)).
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=parsers, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(src/python/pants/engine/exp/examples/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), parsers)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=planners, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(src/python/pants/engine/exp/examples/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), planners)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=graph_validator, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(src/python/pants/engine/exp/examples/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), graph_validator)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=sources, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(src/python/pants/engine/exp/examples/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), sources)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=visualizer, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(src/python/pants/engine/exp/examples/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), visualizer)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_binary.PythonBinary'>, name=viz, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(src/python/pants/engine/exp/examples/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), viz)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_binary.PythonBinary'>, name=viz-fs, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(src/python/pants/engine/exp/examples/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), viz-fs)
DEBUG] BuildFile(src/python/pants/engine/exp/examples/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)) produced the following Addressables:
DEBUG]   * BuildFileAddress(BuildFile(src/python/pants/engine/exp/examples/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), planners): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=planners, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(src/python/pants/engine/exp/examples/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), viz): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_binary.PythonBinary'>, name=viz, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(src/python/pants/engine/exp/examples/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), viz-fs): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_binary.PythonBinary'>, name=viz-fs, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(src/python/pants/engine/exp/examples/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), visualizer): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=visualizer, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(src/python/pants/engine/exp/examples/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), sources): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=sources, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(src/python/pants/engine/exp/examples/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), parsers): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=parsers, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(src/python/pants/engine/exp/examples/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), graph_validator): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=graph_validator, **kwargs=...)
DEBUG] Parsing BUILD file BuildFile(src/python/pants/engine/exp/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)).
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.docgen.targets.doc.Page'>, name=readme, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(src/python/pants/engine/exp/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), readme)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=addressable, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(src/python/pants/engine/exp/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), addressable)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=struct, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(src/python/pants/engine/exp/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), struct)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=engine, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(src/python/pants/engine/exp/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), engine)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=fs, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(src/python/pants/engine/exp/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), fs)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=graph, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(src/python/pants/engine/exp/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), graph)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=mapper, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(src/python/pants/engine/exp/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), mapper)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=nodes, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(src/python/pants/engine/exp/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), nodes)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=objects, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(src/python/pants/engine/exp/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), objects)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=parser, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(src/python/pants/engine/exp/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), parser)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=processing, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(src/python/pants/engine/exp/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), processing)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=selectors, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(src/python/pants/engine/exp/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), selectors)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=scheduler, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(src/python/pants/engine/exp/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), scheduler)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=storage, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(src/python/pants/engine/exp/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), storage)
DEBUG] BuildFile(src/python/pants/engine/exp/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)) produced the following Addressables:
DEBUG]   * BuildFileAddress(BuildFile(src/python/pants/engine/exp/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), struct): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=struct, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(src/python/pants/engine/exp/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), parser): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=parser, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(src/python/pants/engine/exp/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), objects): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=objects, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(src/python/pants/engine/exp/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), addressable): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=addressable, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(src/python/pants/engine/exp/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), storage): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=storage, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(src/python/pants/engine/exp/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), selectors): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=selectors, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(src/python/pants/engine/exp/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), readme): TargetAddressable(target_type=<class 'pants.backend.docgen.targets.doc.Page'>, name=readme, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(src/python/pants/engine/exp/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), processing): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=processing, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(src/python/pants/engine/exp/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), mapper): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=mapper, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(src/python/pants/engine/exp/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), nodes): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=nodes, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(src/python/pants/engine/exp/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), engine): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=engine, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(src/python/pants/engine/exp/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), scheduler): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=scheduler, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(src/python/pants/engine/exp/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), fs): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=fs, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(src/python/pants/engine/exp/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), graph): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=graph, **kwargs=...)
DEBUG] Parsing BUILD file BuildFile(3rdparty/python/twitter/commons/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)).
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_requirement_library.PythonRequirementLibrary'>, name=twitter.common.collections, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(3rdparty/python/twitter/commons/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), twitter.common.collections)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_requirement_library.PythonRequirementLibrary'>, name=twitter.common.confluence, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(3rdparty/python/twitter/commons/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), twitter.common.confluence)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_requirement_library.PythonRequirementLibrary'>, name=twitter.common.dirutil, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(3rdparty/python/twitter/commons/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), twitter.common.dirutil)
DEBUG] BuildFile(3rdparty/python/twitter/commons/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)) produced the following Addressables:
DEBUG]   * BuildFileAddress(BuildFile(3rdparty/python/twitter/commons/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), twitter.common.collections): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_requirement_library.PythonRequirementLibrary'>, name=twitter.common.collections, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(3rdparty/python/twitter/commons/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), twitter.common.dirutil): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_requirement_library.PythonRequirementLibrary'>, name=twitter.common.dirutil, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(3rdparty/python/twitter/commons/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), twitter.common.confluence): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_requirement_library.PythonRequirementLibrary'>, name=twitter.common.confluence, **kwargs=...)
DEBUG] Parsing BUILD file BuildFile(3rdparty/python/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)).
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_requirement_library.PythonRequirementLibrary'>, name=ansicolors, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(3rdparty/python/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), ansicolors)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_requirement_library.PythonRequirementLibrary'>, name=beautifulsoup4, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(3rdparty/python/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), beautifulsoup4)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_requirement_library.PythonRequirementLibrary'>, name=coverage, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(3rdparty/python/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), coverage)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_requirement_library.PythonRequirementLibrary'>, name=docutils, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(3rdparty/python/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), docutils)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_requirement_library.PythonRequirementLibrary'>, name=fasteners, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(3rdparty/python/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), fasteners)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_requirement_library.PythonRequirementLibrary'>, name=futures, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(3rdparty/python/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), futures)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_requirement_library.PythonRequirementLibrary'>, name=lmdb, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(3rdparty/python/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), lmdb)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_requirement_library.PythonRequirementLibrary'>, name=Markdown, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(3rdparty/python/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), Markdown)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_requirement_library.PythonRequirementLibrary'>, name=mock, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(3rdparty/python/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), mock)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_requirement_library.PythonRequirementLibrary'>, name=mox, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(3rdparty/python/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), mox)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_requirement_library.PythonRequirementLibrary'>, name=pathspec, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(3rdparty/python/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), pathspec)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_requirement_library.PythonRequirementLibrary'>, name=pep8, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(3rdparty/python/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), pep8)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_requirement_library.PythonRequirementLibrary'>, name=pex, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(3rdparty/python/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), pex)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_requirement_library.PythonRequirementLibrary'>, name=psutil, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(3rdparty/python/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), psutil)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_requirement_library.PythonRequirementLibrary'>, name=pyflakes, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(3rdparty/python/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), pyflakes)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_requirement_library.PythonRequirementLibrary'>, name=Pygments, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(3rdparty/python/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), Pygments)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_requirement_library.PythonRequirementLibrary'>, name=pystache, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(3rdparty/python/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), pystache)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_requirement_library.PythonRequirementLibrary'>, name=pytest-cov, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(3rdparty/python/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), pytest-cov)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_requirement_library.PythonRequirementLibrary'>, name=pytest-repeat, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(3rdparty/python/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), pytest-repeat)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_requirement_library.PythonRequirementLibrary'>, name=pytest, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(3rdparty/python/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), pytest)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_requirement_library.PythonRequirementLibrary'>, name=pywatchman, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(3rdparty/python/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), pywatchman)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_requirement_library.PythonRequirementLibrary'>, name=requests, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(3rdparty/python/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), requests)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_requirement_library.PythonRequirementLibrary'>, name=setproctitle, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(3rdparty/python/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), setproctitle)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_requirement_library.PythonRequirementLibrary'>, name=setuptools, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(3rdparty/python/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), setuptools)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_requirement_library.PythonRequirementLibrary'>, name=six, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(3rdparty/python/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), six)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_requirement_library.PythonRequirementLibrary'>, name=thrift, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(3rdparty/python/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), thrift)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_requirement_library.PythonRequirementLibrary'>, name=wheel, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(3rdparty/python/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), wheel)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_requirement_library.PythonRequirementLibrary'>, name=antlr-3.1.3, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(3rdparty/python/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), antlr-3.1.3)
DEBUG] BuildFile(3rdparty/python/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)) produced the following Addressables:
DEBUG]   * BuildFileAddress(BuildFile(3rdparty/python/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), pep8): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_requirement_library.PythonRequirementLibrary'>, name=pep8, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(3rdparty/python/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), pytest-cov): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_requirement_library.PythonRequirementLibrary'>, name=pytest-cov, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(3rdparty/python/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), setproctitle): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_requirement_library.PythonRequirementLibrary'>, name=setproctitle, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(3rdparty/python/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), antlr-3.1.3): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_requirement_library.PythonRequirementLibrary'>, name=antlr-3.1.3, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(3rdparty/python/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), pyflakes): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_requirement_library.PythonRequirementLibrary'>, name=pyflakes, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(3rdparty/python/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), thrift): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_requirement_library.PythonRequirementLibrary'>, name=thrift, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(3rdparty/python/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), Markdown): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_requirement_library.PythonRequirementLibrary'>, name=Markdown, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(3rdparty/python/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), coverage): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_requirement_library.PythonRequirementLibrary'>, name=coverage, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(3rdparty/python/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), wheel): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_requirement_library.PythonRequirementLibrary'>, name=wheel, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(3rdparty/python/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), requests): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_requirement_library.PythonRequirementLibrary'>, name=requests, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(3rdparty/python/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), fasteners): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_requirement_library.PythonRequirementLibrary'>, name=fasteners, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(3rdparty/python/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), pathspec): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_requirement_library.PythonRequirementLibrary'>, name=pathspec, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(3rdparty/python/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), pytest): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_requirement_library.PythonRequirementLibrary'>, name=pytest, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(3rdparty/python/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), psutil): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_requirement_library.PythonRequirementLibrary'>, name=psutil, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(3rdparty/python/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), pex): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_requirement_library.PythonRequirementLibrary'>, name=pex, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(3rdparty/python/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), futures): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_requirement_library.PythonRequirementLibrary'>, name=futures, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(3rdparty/python/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), mox): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_requirement_library.PythonRequirementLibrary'>, name=mox, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(3rdparty/python/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), beautifulsoup4): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_requirement_library.PythonRequirementLibrary'>, name=beautifulsoup4, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(3rdparty/python/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), lmdb): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_requirement_library.PythonRequirementLibrary'>, name=lmdb, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(3rdparty/python/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), mock): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_requirement_library.PythonRequirementLibrary'>, name=mock, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(3rdparty/python/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), pywatchman): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_requirement_library.PythonRequirementLibrary'>, name=pywatchman, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(3rdparty/python/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), pystache): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_requirement_library.PythonRequirementLibrary'>, name=pystache, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(3rdparty/python/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), ansicolors): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_requirement_library.PythonRequirementLibrary'>, name=ansicolors, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(3rdparty/python/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), Pygments): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_requirement_library.PythonRequirementLibrary'>, name=Pygments, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(3rdparty/python/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), docutils): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_requirement_library.PythonRequirementLibrary'>, name=docutils, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(3rdparty/python/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), six): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_requirement_library.PythonRequirementLibrary'>, name=six, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(3rdparty/python/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), pytest-repeat): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_requirement_library.PythonRequirementLibrary'>, name=pytest-repeat, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(3rdparty/python/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), setuptools): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_requirement_library.PythonRequirementLibrary'>, name=setuptools, **kwargs=...)
DEBUG] Parsing BUILD file BuildFile(src/python/pants/base/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)).
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=build_environment, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(src/python/pants/base/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), build_environment)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=project_tree, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(src/python/pants/base/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), project_tree)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=file_system_project_tree, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(src/python/pants/base/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), file_system_project_tree)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=scm_project_tree, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(src/python/pants/base/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), scm_project_tree)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=build_file, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(src/python/pants/base/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), build_file)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=build_file_target_factory, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(src/python/pants/base/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), build_file_target_factory)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=build_root, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(src/python/pants/base/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), build_root)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=deprecated, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(src/python/pants/base/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), deprecated)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=exceptions, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(src/python/pants/base/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), exceptions)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=fingerprint_strategy, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(src/python/pants/base/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), fingerprint_strategy)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=generator, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(src/python/pants/base/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), generator)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=hash_utils, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(src/python/pants/base/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), hash_utils)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=mustache, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(src/python/pants/base/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), mustache)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=parse_context, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(src/python/pants/base/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), parse_context)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=payload, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(src/python/pants/base/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), payload)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=payload_field, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(src/python/pants/base/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), payload_field)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=specs, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(src/python/pants/base/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), specs)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=revision, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(src/python/pants/base/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), revision)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=run_info, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(src/python/pants/base/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), run_info)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=cmd_line_spec_parser, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(src/python/pants/base/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), cmd_line_spec_parser)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=worker_pool, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(src/python/pants/base/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), worker_pool)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=workunit, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(src/python/pants/base/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), workunit)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=validation, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(src/python/pants/base/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), validation)
DEBUG] BuildFile(src/python/pants/base/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)) produced the following Addressables:
DEBUG]   * BuildFileAddress(BuildFile(src/python/pants/base/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), build_root): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=build_root, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(src/python/pants/base/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), specs): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=specs, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(src/python/pants/base/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), fingerprint_strategy): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=fingerprint_strategy, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(src/python/pants/base/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), revision): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=revision, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(src/python/pants/base/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), workunit): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=workunit, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(src/python/pants/base/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), exceptions): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=exceptions, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(src/python/pants/base/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), file_system_project_tree): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=file_system_project_tree, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(src/python/pants/base/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), payload): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=payload, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(src/python/pants/base/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), deprecated): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=deprecated, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(src/python/pants/base/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), cmd_line_spec_parser): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=cmd_line_spec_parser, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(src/python/pants/base/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), build_environment): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=build_environment, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(src/python/pants/base/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), run_info): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=run_info, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(src/python/pants/base/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), hash_utils): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=hash_utils, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(src/python/pants/base/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), build_file_target_factory): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=build_file_target_factory, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(src/python/pants/base/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), project_tree): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=project_tree, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(src/python/pants/base/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), worker_pool): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=worker_pool, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(src/python/pants/base/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), validation): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=validation, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(src/python/pants/base/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), parse_context): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=parse_context, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(src/python/pants/base/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), scm_project_tree): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=scm_project_tree, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(src/python/pants/base/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), build_file): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=build_file, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(src/python/pants/base/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), payload_field): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=payload_field, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(src/python/pants/base/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), mustache): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=mustache, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(src/python/pants/base/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), generator): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=generator, **kwargs=...)
DEBUG] Parsing BUILD file BuildFile(src/python/pants/option/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)).
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=option, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(src/python/pants/option/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), option)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.build_graph.target.Target'>, name=migrate_config, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(src/python/pants/option/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), migrate_config)
DEBUG] BuildFile(src/python/pants/option/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)) produced the following Addressables:
DEBUG]   * BuildFileAddress(BuildFile(src/python/pants/option/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), migrate_config): TargetAddressable(target_type=<class 'pants.build_graph.target.Target'>, name=migrate_config, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(src/python/pants/option/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), option): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=option, **kwargs=...)
DEBUG] Parsing BUILD file BuildFile(src/python/pants/source/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)).
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=source, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(src/python/pants/source/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), source)
DEBUG] BuildFile(src/python/pants/source/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)) produced the following Addressables:
DEBUG]   * BuildFileAddress(BuildFile(src/python/pants/source/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), source): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=source, **kwargs=...)
DEBUG] Parsing BUILD file BuildFile(src/python/pants/subsystem/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)).
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=subsystem, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(src/python/pants/subsystem/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), subsystem)
DEBUG] BuildFile(src/python/pants/subsystem/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)) produced the following Addressables:
DEBUG]   * BuildFileAddress(BuildFile(src/python/pants/subsystem/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), subsystem): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=subsystem, **kwargs=...)
DEBUG] Parsing BUILD file BuildFile(src/python/pants/util/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)).
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=contextutil, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(src/python/pants/util/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), contextutil)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=dirutil, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(src/python/pants/util/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), dirutil)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=eval, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(src/python/pants/util/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), eval)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=fileutil, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(src/python/pants/util/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), fileutil)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=filtering, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(src/python/pants/util/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), filtering)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=memo, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(src/python/pants/util/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), memo)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=meta, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(src/python/pants/util/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), meta)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=netrc, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(src/python/pants/util/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), netrc)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=objects, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(src/python/pants/util/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), objects)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=osutil, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(src/python/pants/util/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), osutil)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=process_handler, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(src/python/pants/util/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), process_handler)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=retry, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(src/python/pants/util/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), retry)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=rwbuf, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(src/python/pants/util/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), rwbuf)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=socket, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(src/python/pants/util/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), socket)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=strutil, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(src/python/pants/util/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), strutil)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=timeout, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(src/python/pants/util/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), timeout)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=xml_parser, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(src/python/pants/util/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), xml_parser)
DEBUG] BuildFile(src/python/pants/util/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)) produced the following Addressables:
DEBUG]   * BuildFileAddress(BuildFile(src/python/pants/util/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), contextutil): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=contextutil, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(src/python/pants/util/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), memo): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=memo, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(src/python/pants/util/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), osutil): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=osutil, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(src/python/pants/util/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), socket): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=socket, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(src/python/pants/util/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), retry): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=retry, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(src/python/pants/util/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), fileutil): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=fileutil, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(src/python/pants/util/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), meta): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=meta, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(src/python/pants/util/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), timeout): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=timeout, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(src/python/pants/util/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), netrc): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=netrc, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(src/python/pants/util/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), objects): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=objects, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(src/python/pants/util/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), rwbuf): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=rwbuf, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(src/python/pants/util/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), process_handler): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=process_handler, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(src/python/pants/util/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), strutil): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=strutil, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(src/python/pants/util/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), filtering): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=filtering, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(src/python/pants/util/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), xml_parser): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=xml_parser, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(src/python/pants/util/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), eval): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=eval, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(src/python/pants/util/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), dirutil): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=dirutil, **kwargs=...)
DEBUG] Parsing BUILD file BuildFile(src/python/pants/scm/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)).
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=scm, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(src/python/pants/scm/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), scm)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=git, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(src/python/pants/scm/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), git)
DEBUG] BuildFile(src/python/pants/scm/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)) produced the following Addressables:
DEBUG]   * BuildFileAddress(BuildFile(src/python/pants/scm/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), scm): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=scm, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(src/python/pants/scm/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), git): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=git, **kwargs=...)
DEBUG] Parsing BUILD file BuildFile(src/python/pants/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)).
DEBUG] Adding TargetAddressable(target_type=<class 'pants.build_graph.target.Target'>, name=pants, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(src/python/pants/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), pants)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=pants-packaged, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(src/python/pants/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), pants-packaged)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.docgen.targets.doc.Page'>, name=readme, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(src/python/pants/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), readme)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=version, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(src/python/pants/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), version)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.docgen.targets.doc.Page'>, name=changelog, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(src/python/pants/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), changelog)
DEBUG] BuildFile(src/python/pants/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)) produced the following Addressables:
DEBUG]   * BuildFileAddress(BuildFile(src/python/pants/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), version): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=version, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(src/python/pants/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), readme): TargetAddressable(target_type=<class 'pants.backend.docgen.targets.doc.Page'>, name=readme, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(src/python/pants/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), pants-packaged): TargetAddressable(target_type=<class 'pants.backend.python.targets.python_library.PythonLibrary'>, name=pants-packaged, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(src/python/pants/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), changelog): TargetAddressable(target_type=<class 'pants.backend.docgen.targets.doc.Page'>, name=changelog, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(src/python/pants/BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), pants): TargetAddressable(target_type=<class 'pants.build_graph.target.Target'>, name=pants, **kwargs=...)
DEBUG] Executing: git --git-dir=/Users/peiyu/github/pants/.git --work-tree=/Users/peiyu/github/pants rev-parse --abbrev-ref HEAD
DEBUG] Detected git repository at /Users/peiyu/github/pants on branch peiyu/upgrade-pytest-cov
DEBUG] Executing: git --git-dir=/Users/peiyu/github/pants/.git --work-tree=/Users/peiyu/github/pants rev-parse HEAD
DEBUG] Executing: git --git-dir=/Users/peiyu/github/pants/.git --work-tree=/Users/peiyu/github/pants rev-parse --abbrev-ref HEAD

00:34:11 00:00 [main]
               (To run a reporting server: ./pants server)
00:34:11 00:00   [setup]
00:34:11 00:00     [parse]DEBUG] Parsing BUILD file BuildFile(BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)).
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.docgen.targets.doc.Page'>, name=readme, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), readme)
DEBUG] BuildFile(BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)) produced the following Addressables:
DEBUG]   * BuildFileAddress(BuildFile(BUILD, FileSystemProjectTree(/Users/peiyu/github/pants)), readme): TargetAddressable(target_type=<class 'pants.backend.docgen.targets.doc.Page'>, name=readme, **kwargs=...)
DEBUG] Parsing BUILD file BuildFile(BUILD.tools, FileSystemProjectTree(/Users/peiyu/github/pants)).
DEBUG] Adding TargetAddressable(target_type=<class 'pants.build_graph.target.Target'>, name=scala-js-cli, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(BUILD.tools, FileSystemProjectTree(/Users/peiyu/github/pants)), scala-js-cli)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.build_graph.target.Target'>, name=scala-js-compiler, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(BUILD.tools, FileSystemProjectTree(/Users/peiyu/github/pants)), scala-js-compiler)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.build_graph.target.Target'>, name=scala-js-library, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(BUILD.tools, FileSystemProjectTree(/Users/peiyu/github/pants)), scala-js-library)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.jvm.targets.jar_library.JarLibrary'>, name=scrooge-gen, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(BUILD.tools, FileSystemProjectTree(/Users/peiyu/github/pants)), scrooge-gen)
DEBUG] Adding TargetAddressable(target_type=<class 'pants.backend.jvm.targets.jar_library.JarLibrary'>, name=scrooge-linter, **kwargs=...) to the BuildFileParser address map with BuildFileAddress(BuildFile(BUILD.tools, FileSystemProjectTree(/Users/peiyu/github/pants)), scrooge-linter)
DEBUG] BuildFile(BUILD.tools, FileSystemProjectTree(/Users/peiyu/github/pants)) produced the following Addressables:
DEBUG]   * BuildFileAddress(BuildFile(BUILD.tools, FileSystemProjectTree(/Users/peiyu/github/pants)), scala-js-compiler): TargetAddressable(target_type=<class 'pants.build_graph.target.Target'>, name=scala-js-compiler, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(BUILD.tools, FileSystemProjectTree(/Users/peiyu/github/pants)), scala-js-cli): TargetAddressable(target_type=<class 'pants.build_graph.target.Target'>, name=scala-js-cli, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(BUILD.tools, FileSystemProjectTree(/Users/peiyu/github/pants)), scrooge-gen): TargetAddressable(target_type=<class 'pants.backend.jvm.targets.jar_library.JarLibrary'>, name=scrooge-gen, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(BUILD.tools, FileSystemProjectTree(/Users/peiyu/github/pants)), scrooge-linter): TargetAddressable(target_type=<class 'pants.backend.jvm.targets.jar_library.JarLibrary'>, name=scrooge-linter, **kwargs=...)
DEBUG]   * BuildFileAddress(BuildFile(BUILD.tools, FileSystemProjectTree(/Users/peiyu/github/pants)), scala-js-library): TargetAddressable(target_type=<class 'pants.build_graph.target.Target'>, name=scala-js-library, **kwargs=...)
[32m
               Executing tasks in goals: bootstrap -> imports -> unpack-jars -> deferred-sources -> gen -> jvm-platform-validate -> resolve -> compile -> resources -> test[0m
00:34:12 00:01   [bootstrap]
00:34:12 00:01     [jar-dependency-management]DEBUG] Located Distribution(u'/Library/Java/JavaVirtualMachines/jdk1.8.0_65.jdk/Contents/Home/bin', minimum_version=None, maximum_version=None jdk=False) for constraints: minimum_version None, maximum_version None, jdk False

00:34:12 00:01     [bootstrap-jvm-tools]
00:34:12 00:01   [imports]
00:34:12 00:01     [ivy-imports]
00:34:12 00:01   [unpack-jars]
00:34:12 00:01     [unpack-jars]
00:34:12 00:01     [unpack-libs]
00:34:12 00:01   [deferred-sources]
00:34:12 00:01     [deferred-sources]
00:34:12 00:01   [gen]
00:34:12 00:01     [thrift]
00:34:12 00:01     [protoc]
00:34:12 00:01     [antlr]
00:34:12 00:01     [ragel]
00:34:12 00:01     [jaxb]
00:34:12 00:01     [wire]
00:34:12 00:01     [aapt]
00:34:12 00:01     [go-thrift]
00:34:12 00:01     [scrooge]
00:34:12 00:01     [spindle]
00:34:12 00:01   [jvm-platform-validate]
00:34:12 00:01     [jvm-platform-validate]
00:34:12 00:01   [resolve]
00:34:12 00:01     [ivy]DEBUG] Using previous fetch.

00:34:12 00:01     [go]
00:34:12 00:01     [scala-js-compile]
00:34:12 00:01     [scala-js-link]
00:34:12 00:01     [node]
00:34:12 00:01   [compile]
00:34:12 00:01     [compile-jvm-prep-command]
00:34:12 00:01       [jvm_prep_command]
00:34:12 00:01     [compile-prep-command]
00:34:12 00:01     [compile]
00:34:12 00:01     [zinc]
00:34:12 00:01     [jvm-dep-check]
00:34:12 00:01     [checkstyle]
00:34:12 00:01     [scalastyle]
00:34:12 00:01     [cpp]
00:34:12 00:01     [go]
00:34:12 00:01     [gofmt]
00:34:12 00:01     [python-eval][36m
                 No excludes file specified. All python sources will be checked.[0m
00:34:12 00:01     [pythonstyle]
00:34:12 00:01   [resources]
00:34:12 00:01     [prepare]
00:34:12 00:01     [services]
00:34:12 00:01   [test]
00:34:12 00:01     [test-jvm-prep-command]
00:34:12 00:01       [jvm_prep_command]
00:34:12 00:01     [test-prep-command]
00:34:12 00:01     [test]
00:34:12 00:01     [pytest]
00:34:12 00:01       [run]
                     [36m
                     Detected interpreter /Users/peiyu/github/pants/build-support/pants_dev_deps.venv/bin/python2.7: CPython-2.7.10[0m[36m
                     Detected interpreter /System/Library/Frameworks/Python.framework/Versions/2.7/bin/python2.7: CPython-2.7.5[0m[1m============== test session starts ===============[0m
                     platform darwin -- Python 2.7.10 -- py-1.4.30 -- pytest-2.6.4
                     plugins: cov, timeout, repeat
                     [1m                     collecting 0 items[0m[1m                     collecting 12 items[0m[1m                     collecting 18 items[0m[1m                     collecting 18 items[0m[1m                     collecting 22 items[0m[1m                     collecting 27 items[0m[1m                     collecting 32 items[0m[1m                     collecting 32 items[0m[1m                     collecting 32 items[0m[1m                     collecting 39 items[0m[1m                     collecting 41 items[0m[1m                     collecting 41 items[0m[1m                     collecting 52 items[0m[1m                     collecting 52 items[0m[1m                     collecting 52 items[0m[1m                     collecting 55 items[0m[1m                     collecting 58 items[0m[1m                     collecting 61 items[0m[1m                     collecting 62 items[0m[1m                     collecting 69 items[0m[1m                     collecting 78 items[0m[1m                     collecting 87 items[0m[1m                     collecting 87 items[0m[1m                     collecting 94 items[0m[1m                     collecting 94 items[0m[1m                     collecting 99 items[0m[1m                     collecting 99 items[0m[1m                     collecting 99 items[0m[1m                     collecting 99 items[0m[1m                     collecting 99 items[0m[1m                     collecting 109 items[0m[1m                     collecting 112 items[0m[1m                     collecting 112 items[0m[1m                     collecting 117 items[0m[1m                     collecting 117 items[0m[1m                     collecting 117 items[0m[1m                     collecting 117 items[0m[1m                     collecting 117 items[0m[1m                     collecting 117 items[0m[1m                     collecting 126 items[0m[1m                     collecting 128 items[0m[1m                     collecting 130 items[0m[1m                     collecting 131 items[0m[1m                     collecting 131 items[0m[1m                     collecting 145 items[0m[1m                     collecting 157 items[0m[1m                     collecting 157 items[0m[1m                     collected 157 items 
                     [0m
                     tests/python/pants_test/engine/exp/test_engine.py ivy_resolve executed for (Jar(address=3rdparty/jvm:scala-library),), returned: Classpath(creator=u'ivy_resolve')
                     scalac executed for (ScalaSources(dependencies=[3rdparty/jvm:scala-library], files=[u'Scrooge.scala'], spec_path=u'src/scala/scrooge', type_alias=u'scala'), [Classpath(creator=u'ivy_resolve')]), returned: Classpath(creator=u'scalac')
                     ivy_resolve executed for (Jar(address=3rdparty/jvm:guava),), returned: Classpath(creator=u'ivy_resolve')
                     gen_apache_thrift executed for (ThriftSources(files=[u'simple.thrift'], spec_path=u'src/thrift/codegen/simple', type_alias=u'thrift'), ApacheThriftJavaConfiguration(dependencies=[Jar(name=u'libthrift', org=u'org.apache.thrift', rev=u'0.9.2', type_alias=u'jar'), Jar(name=u'commons-lang', org=u'commons-lang', rev=u'2.5', type_alias=u'jar'), src/thrift:slf4j-api], name=u'apache_java', rev=u'0.9.2', strict=True, type_alias=u'apache_thrift_java_configuration')), returned: JavaSources(dependencies=[Jar(name=u'libthrift', org=u'org.apache.thrift', rev=u'0.9.2', type_alias=u'jar'), Jar(name=u'commons-lang', org=u'commons-lang', rev=u'2.5', type_alias=u'jar'), src/thrift:slf4j-api], files=[u'Fake.java'])
                     executed 250 nodes in 1980 scheduling iterations. there have been 1980 total steps for 973 total nodes.
                     ivy_resolve executed for (Jar(address=3rdparty/jvm:scala-library),), returned: Classpath(creator=u'ivy_resolve')
                     scalac executed for (ScalaSources(dependencies=[3rdparty/jvm:scala-library], files=[u'Scrooge.scala'], spec_path=u'src/scala/scrooge', type_alias=u'scala'), [Classpath(creator=u'ivy_resolve')]), returned: Classpath(creator=u'scalac')
                     ivy_resolve executed for (Jar(name=u'commons-lang', org=u'commons-lang', rev=u'2.5', type_alias=u'jar'),), returned: Classpath(creator=u'ivy_resolve')
                     ivy_resolve executed for (Jar(name=u'libthrift', org=u'org.apache.thrift', rev=u'0.9.2', type_alias=u'jar'),), returned: Classpath(creator=u'ivy_resolve')
                     ivy_resolve executed for (Jar(address=src/thrift:slf4j-api),), returned: Classpath(creator=u'ivy_resolve')
                     javac executed for (JavaSources(dependencies=[Jar(name=u'libthrift', org=u'org.apache.thrift', rev=u'0.9.2', type_alias=u'jar'), Jar(name=u'commons-lang', org=u'commons-lang', rev=u'2.5', type_alias=u'jar'), src/thrift:slf4j-api], files=[u'Fake.java']), [Classpath(creator=u'ivy_resolve'), Classpath(creator=u'ivy_resolve'), Classpath(creator=u'ivy_resolve')]), returned: Classpath(creator=u'javac')
                     javac executed for (JavaSources(dependencies=[3rdparty/jvm:guava, src/thrift/codegen/simple:simple], files=[u'Simple.java'], spec_path=u'src/java/codegen/simple', type_alias=u'java'), [Classpath(creator=u'ivy_resolve'), Classpath(creator=u'javac')]), returned: Classpath(creator=u'javac')
                     executed 250 nodes in 770 scheduling iterations. there have been 3960 total steps for 973 total nodes.
                     .
                     
                     [1m 156 tests deselected by '-ktest_rerun_with_cache' [0m
                     [32m[1m==== 1 passed, 156 deselected in 2.61 seconds ====[0m
                     
00:34:15 00:04     [junit]
00:34:15 00:04     [go]
00:34:15 00:04     [node]
00:34:15 00:04   [complete][32m
               SUCCESS[0m
